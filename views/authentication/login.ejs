<%- include('../partials/authentication_header'); %>

	<%- include('../authentication/guest'); %>


		<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


		<body class="text-center">

			<main class="form-signin">

				<iframe name="dummyframe" id="dummyframe" style="display: none;"></iframe>
				<form target="dummyframe">

					<img class="mb-4" src="logo-transparent.png" alt="logo" width="200">

					<h1 class="h3 mb-3 fw-normal">Login</h1>
					<div class="alert alert-warning" id="message" role="alert" style="display: none;">
						<ul class="list-unstyled mb-0">

							<li id="contentErr"></li>

						</ul>
					</div>



					<div class="form-group mb-3">

						<a style=" text-decoration: none;" href='/register'>Register</a><br />

					</div>

					<button class="w-100 btn btn-lg btn-primary" type="submit" onclick="login()">Login</button>


					<br /><br />


					<%- include('../partials/authentication_footer'); %>
						<button class=" btn btn-primary" type="submit" onclick="deployFarmer()">Deploy Farmer</button>
						<button class=" btn  btn-primary" type="submit" onclick="deployRetailers()">Deploy
							Retailer</button><br /><br />
						<button class=" btn  btn-primary" type="submit" onclick="deployDistributor()">Deploy
							Distributor</button>
						<button class=" btn  btn-primary" type="submit" onclick="deployClients()">Deploy
							Clients</button>
						<form>

			</main>



		</body>

		<script>
			const ABI = JSON.parse(localStorage.getItem("UserABI"));
			const Address = localStorage.getItem("UserAddress")




			const deployClients = async () => {

				const accounts = await ethereum.request({ method: "eth_requestAccounts" });
				account = accounts[0];
				window.web3 = await new Web3(window.ethereum); //how to access to smart contract 
				window.UserContract = await new window.web3.eth.Contract(ABI, Address); //how you create an instance of that contract by using the abi and address 

				try {
					await window.UserContract.methods.deployClients(account).send({ from: account });

				} catch (error) {
					console.log("Erorr:<br/>" + error.message);

				}




			}

			const deployFarmer = async () => {

				const accounts = await ethereum.request({ method: "eth_requestAccounts" });
				account = accounts[0];
				window.web3 = await new Web3(window.ethereum); //how to access to smart contract 
				window.UserContract = await new window.web3.eth.Contract(ABI, Address); //how you create an instance of that contract by using the abi and address 

				try {
					await window.UserContract.methods.deployFarmer(account).send({ from: account });

				} catch (error) {
					console.log("Erorr:<br/>" + error.message);

				}

			}

			const deployRetailers = async () => {
				const accounts = await ethereum.request({ method: "eth_requestAccounts" });
				account = accounts[0];

				window.web3 = await new Web3(window.ethereum); //how to access to smart contract 
				window.UserContract = await new window.web3.eth.Contract(ABI, Address); //how you create an instance of that contract by using the abi and address 

				try {
					await window.UserContract.methods.deployRetailers(account).send({ from: account });

				} catch (error) {
					console.log("Erorr:<br/>" + error.message);

				}



			}

			const deployDistributor = async () => {
				const accounts = await ethereum.request({ method: "eth_requestAccounts" });
				account = accounts[0];

				window.web3 = await new Web3(window.ethereum); //how to access to smart contract 
				window.UserContract = await new window.web3.eth.Contract(ABI, Address); //how you create an instance of that contract by using the abi and address 

				try {
					await window.UserContract.methods.deployDistributor(account).send({ from: account });

				} catch (error) {
					console.log("Erorr:<br/>" + error.message);

				}


			}

			const login = async () => {


				const accounts = await ethereum.request({ method: "eth_requestAccounts" });
				account = accounts[0];
				window.web3 = await new Web3(window.ethereum); //how to access to smart contract 
				window.UserContract = await new window.web3.eth.Contract(ABI, Address); //how you create an instance of that contract by using the abi and address  
				if (await window.UserContract.methods.login(account).call()) {
					
					const data = await window.UserContract.methods.retrieveProfile(account).call();


					const person = {
						userID: data[0], username: data[1], firstName: data[2], lastName: data[3], email: data[4],
						contactNum: data[5], role: data[6], dateJoined: data[7], profile_pic: data[8], wallet: data[9]
					};
					const personJsonFormat = JSON.stringify(person);
					console.log(personJsonFormat);

					localStorage.setItem("user", personJsonFormat);
					window.location.href = '/home';

				}
				else {
					Swal.fire({
						title: 'Login Failed',
						text: 'You havent create an account with this wallet, please go to register an account first',
						icon: 'error',
						confirmButtonText: 'OK'
					}).then(function () {
						window.location.href = '/register';
					});


				}

			}
		</script>

		</html>