<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="Mark Otto, Jacob Thornton, and Bootstrap contributors">
    <meta name="generator" content="Hugo 0.84.0">
    <title>Change Password </title>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/jsSHA/2.0.2/sha.js"></script>
    <link rel="canonical" href="https://getbootstrap.com/docs/5.0/examples/dashboard/">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


    <!-- Bootstrap core CSS -->
    <!--        <link href="bootstrap/assets/dist/css/bootstrap.min.css" rel="stylesheet">-->

    <style>
        .bd-placeholder-img {
            font-size: 1.125rem;
            text-anchor: middle;
            -webkit-user-select: none;
            -moz-user-select: none;
            user-select: none;
        }

        @media (min-width: 768px) {
            .bd-placeholder-img-lg {
                font-size: 3.5rem;
            }
        }
    </style>


    <!-- Custom styles for this template -->
    <!--        <link href="bootstrap/dashboard/dashboard.css" rel="stylesheet">-->
</head>


<%- include('../authentication/authorized'); %>

    <body>
        <%- include('../partials/home_navbar'); %>
            <%- include('../partials/home_sidebar'); %>

                <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
                    <div
                        class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                        <h1 class="h2">User Profile</h1>
                    </div>
                    <h4 class="h4">Change Password </h4>
                    <div class="col d-flex justify-content-center">
                        <div class="card" style="width:40%;">
                            <div class="card-body">
                                <iframe name="dummyframe" id="dummyframe" style="display: none;"></iframe>
                                <form target="dummyframe">

                                    <div class="row g-3">


                                        <div style="padding-left:20px; padding-right:20px;" class="col-12">
                                            <h4 class="mb-3">Old Password</h4>
                                            <div class="input-group has-validation">

                                                <input type="password" class="form-control" id="oldPassword"
                                                    name="oldPassword" value="" maxlength="50" placeholder=""
                                                    required="required" autofocus>

                                            </div>

                                            <span id="old_passwordErr" class="text-danger text-left"></span>


                                        </div>
                                        <div style="padding-left:20px; padding-right:20px;" class="col-12">
                                            <h4 class="mb-3">New Password</h4>
                                            <input type="password" class="form-control" id="new_password"
                                                name="new_password" value="" maxlength="50" placeholder=""
                                                required="required" autofocus>
                                            <small>Minimum length is 6 and must contain atleast 1 uppercase, lowercase,
                                                special character and numeric number </small><br />


                                            <span id="new_passwordErr" class="text-danger text-left"></span>

                                        </div>

                                        <div style="padding-left:20px; padding-right:20px;" class="col-12">
                                            <h4 class="mb-3">Confirm Password</h4>
                                            <input type="password" class="form-control" id="confirm_password"
                                                name="confirm_password" value="" maxlength="50" placeholder=""
                                                required="required" autofocus>


                                            <span id="con_passwordErr" class="text-danger text-left"></span>

                                        </div>




                                    </div><br />



                                    <button class=" btn btn-outline-secondary  btn-lg" type="submit"
                                        onclick="changePassword()">Change
                                        Password</button>



                                    <a style=" float: right;" href="/profile"
                                        class=" btn btn-outline-secondary btn-lg">Back</a>
                                </form>
                            </div>
                        </div>
                    </div>
                </main> <%- include('../partials/scroll_button'); %>

                    <script>


                        const changePassword = async () => {
                            var oldPassword = document.getElementById("oldPassword").value;
                            var new_password = document.getElementById("new_password").value;
                            var confirm_password = document.getElementById("confirm_password").value;


                      
                            if (oldPassword != "" && new_password != "" && confirm_password != "") {
                                if (validate(new_password, confirm_password)) {
                                    if (window.ethereum !== "undefined") {
                                        const accounts = await ethereum.request({ method: "eth_requestAccounts" });
                                        account = accounts[0];
                                    }
                                    const ABI = [
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "userID",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "firstName",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "lastName",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "email",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "username",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "password",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "contactNum",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "role",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "homeAddress",
				"type": "string"
			}
		],
		"name": "register",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "inputUserID",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "oldPassword",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "newPassword",
				"type": "string"
			}
		],
		"name": "updatePassword",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "inputUserID",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "inpuUsername",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "inpuFirstName",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "inpuLastName",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "inputContactNum",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "inputHomeAddress",
				"type": "string"
			}
		],
		"name": "updateProfile",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "inputUserID",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "profileName",
				"type": "string"
			}
		],
		"name": "updateProfilePicture",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "username",
				"type": "string"
			}
		],
		"name": "displayProfile",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "inputUsername",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "inputPassword",
				"type": "string"
			}
		],
		"name": "login",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
];
                                    const Address = "0x7AAEdba22E3f7F10bab0ec84196E7602AdDc6Ed3";
                                    window.web3 = await new Web3(window.ethereum); //how to access to smart contract
                                    window.UserContract = await new window.web3.eth.Contract(ABI, Address); //how you create an instance of that contract by using the abi and address
                                    try {
                                        var hashObj = new jsSHA("SHA-512", "TEXT", { numRounds: 1 });
                                        hashObj.update(new_password);
                                        var newhash = hashObj.getHash("HEX");
                                        new_password = newhash;

                                        var hashObj2 = new jsSHA("SHA-512", "TEXT", { numRounds: 1 });
                                        hashObj2.update(oldPassword);
                                        var newhash2 = hashObj2.getHash("HEX");
                                        oldPassword = newhash2;

                                        
                                        console.log(oldPassword);
                                        console.log(new_password);
                                        console.log(userJson.userID);
                                       await window.UserContract.methods.updatePassword(userJson.userID, oldPassword, new_password).send({ from: account });

                                        

                                        Swal.fire({
                                            title: 'Password Update Succesful',
                                            text: 'Password update successfully',
                                            icon: 'success',
                                            confirmButtonText: 'OK'
                                        }).then(function () {
                                            window.location.href = '/profile';
                                        });
                                    } catch (error) {
                                        // registration failed, render error message
                                        console.log("Erorr:<br/>" + error.message);
                                        document.getElementById("old_passwordErr").innerHTML = "Invalid old password.";
                                  


                                        // document.getElementById("contentErr").innerHTML = "The username already exist.";
                                        //  res.render('register', { error: error.message });
                                    }



                                }

                            }

                        }

                        function validate(new_password, confirm_password) {
                            var valid = true;

                            const regexPassword = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{6,}$/;

                            if (!regexPassword.test(new_password)) {
                                document.getElementById("new_passwordErr").innerHTML = "Invalid password format";
                                valid = false;
                                return valid;
                            }
                            else {
                                document.getElementById("new_passwordErr").innerHTML = "";
                                valid = true;
                            }

                            if (confirm_password != new_password) {
                                document.getElementById("con_passwordErr").innerHTML = "Unmatch new password and confirm password ";
                                valid = false;
                                return valid;
                            }
                            else {
                                document.getElementById("con_passwordErr").innerHTML = "";
                                valid = true;
                            }


                            return valid;
                        }
                    </script>
                    <!-- <script src="../bootstrap/assets/dist/js/bootstrap.bundle.min.js"></script>

                <script src="https://cdn.jsdelivr.net/npm/feather-icons@4.28.0/dist/feather.min.js"
                    integrity="sha384-uO3SXW5IuS1ZpFPKugNNWqTZRRglnUJK6UAZ/gxOX80nxEkN9NcGZTftn6RzhGWE"
                    crossorigin="anonymous"></script>
                <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js"
                    integrity="sha384-zNy6FEbO50N+Cg5wap8IKA4M/ZnLJgzc6w2NqACZaK0u0FXfOWRRJOnQtpZun8ha"
                    crossorigin="anonymous"></script>
                <script src="dashboard.js"></script> -->
    </body>

</html>