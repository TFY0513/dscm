<!doctype html>
<html lang="en">

<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<meta name="description" content="">
	<meta name="author" content="Mark Otto, Jacob Thornton, and Bootstrap contributors">
	<meta name="generator" content="Hugo 0.84.0">
	<title>Edit Profile</title>

	<link rel="canonical" href="https://getbootstrap.com/docs/5.0/examples/dashboard/">
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


	<!-- Bootstrap core CSS -->
	<!--        <link href="bootstrap/assets/dist/css/bootstrap.min.css" rel="stylesheet">-->

	<style>
		.hidden {
			display: none;
		}


		.bd-placeholder-img {
			font-size: 1.125rem;
			text-anchor: middle;
			-webkit-user-select: none;
			-moz-user-select: none;
			user-select: none;
		}

		@media (min-width: 768px) {
			.bd-placeholder-img-lg {
				font-size: 3.5rem;
			}
		}
	</style>


	<!-- Custom styles for this template -->
	<!--        <link href="bootstrap/dashboard/dashboard.css" rel="stylesheet">-->
</head>
<link href="style.css" rel="stylesheet">
<div id="snackbar"></div>
<script>


	function myFunction(message) {
		document.getElementById("snackbar").innerHTML = message;
		var x = document.getElementById("snackbar");
		x.className = "show";
		setTimeout(function () {
			x.className = x.className.replace("show", "");
		}, 2500);
	}


    // myFunction();





</script>
<%- include('../authentication/authorized'); %>

	<body>
		<%- include('../partials/home_navbar'); %>
			<%- include('../partials/home_sidebar'); %>

				<main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
					<div
						class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
						<h1 class="h2">User Profile</h1>

					</div>
					<div class="col d-flex justify-content-center">
						<div class="card" style="width:50%;">
							<div class="card-body">

								<iframe name="dummyframe" id="dummyframe" style="display: none;"></iframe>
								<form target="dummyframe">


									<div class="row g-3">


										<div class="col-12">
											<h4 class="mb-3">Username</h4>
											<div class="input-group has-validation">


												<input type="text" class="form-control" id="formUsername"
													name="username" value="" maxlength="20" required="required"
													autofocus>


											</div>


											<span id="usernameErr" class="text-danger text-left"></span>


										</div>
										<div class="col-sm-6">
											<h4 class="mb-3">Firstname</h4>

											<input type="text" class="form-control" id="formfirstName" name="firstName"
												value="" maxlength="30" value="" required>



											<span id="firstNameErr" class="text-danger text-left"></span>


										</div>

										<div class="col-sm-6">
											<h4 class="mb-3">Lastname</h4>

											<input type="text" class="form-control" id="formlastName" name="lastName"
												value="" maxlength="30" value="" required>




											<span id="lastNameErr" class="text-danger text-left"></span>


										</div>



										<div class="col-12">
											<h4 class="mb-3">Contact Number</h4>

											<input type="text" class="form-control" id="formcontactNum"
												name="contactNum" value="" maxlength="20" placeholder="" required>



											<span id="contactNumErr" class="text-danger text-left"></span>

										</div>
										<div class="col-12 " id="locationDIV">
											<h4 id="" class="mb-3">Home Address</h4>
											<textarea id="userLocation" class="form-control" name="homeAddress" rows="4"
												maxlength="200" placeholder="Location" required cols="50"></textarea>
										</div>



										<!-- 
                                    <div class="col-12">
                                        <h4 class="mb-3">Profile Image</h4>
                                        <input type="file" class="form-control" id="profile" placeholder=""
                                            name="profilePic">

                                        <span id="pictureErr" class="text-danger text-left"></span>

                                    </div> -->
										<a href="/imageUpload">Upload Profile Image</a>
									</div><br />
									<button onclick="editProfile()" class=" btn btn-outline-secondary  btn-lg"
										type="submit">Update Profile</button>



									<a style=" float: right;" href="/profile"
										class=" btn btn-outline-secondary btn-lg">Back</a>
								</form>
							</div>
						</div>
					</div>
				</main> <%- include('../partials/scroll_button'); %>

					<script>
						console.log(userJson.role);
						const ABI = JSON.parse(localStorage.getItem("UserABI"));
						const Address = localStorage.getItem("UserAddress")


						const getExtraDetail = async () => {
							const accounts = await ethereum.request({ method: "eth_requestAccounts" });
							account = accounts[0];
							window.web3 = await new Web3(window.ethereum); //how to access to smart contract 
							window.UserContract = await new window.web3.eth.Contract(ABI, Address); //how you create an instance of that contract by using the abi and address 


							document.getElementById("formUsername").value = userJson.username;
							document.getElementById("formfirstName").value = userJson.firstName;
							document.getElementById("formlastName").value = userJson.lastName;

							document.getElementById("formcontactNum").value = userJson.contactNum;


							switch (userJson.role) {
								case "0":
									document.getElementById("locationDIV").classList.add("hidden");
									document.getElementById("userLocation").value = "";
									break;
								case "1":

									document.getElementById("locationDIV").classList.add("hidden");
									document.getElementById("userLocation").value = "";

									break;
								case "2":
									document.getElementById("locationDIV").classList.add("hidden");
									document.getElementById("userLocation").value = "";
									break;
								default:
									const clientData = await window.UserContract.methods.displayClientsDetail(userJson.wallet).call();
									document.getElementById("userLocation").value = clientData;
									break;
							}

						}
						getExtraDetail();


						const editProfile = async () => {

							var username = document.getElementById("formUsername").value;
							var firstname = document.getElementById("formfirstName").value;
							var lastname = document.getElementById("formlastName").value;
							var contactNum = document.getElementById("formcontactNum").value;
							var location = document.getElementById("userLocation").value;
							console.log(location);
							if (username != "" && firstname != "" && lastname != "" && contactNum != "") {

								if (validate(username, firstname, lastname, contactNum)) {

									const accounts = await ethereum.request({ method: "eth_requestAccounts" });
									account = accounts[0];
									window.web3 = await new Web3(window.ethereum); //how to access to smart contract 
									window.UserContract = await new window.web3.eth.Contract(ABI, Address); //how you create an instance of that contract by using the abi and address 

									if (userJson.role == 3 && location == "") {

									}
									else {
										try {
											await window.UserContract.methods.updateProfile(username, firstname, lastname, contactNum, userJson.wallet, location).send({ from: account });



											const data = await window.UserContract.methods.retrieveProfile(account).call();

											const person = {
												userID: data[0], firstName: data[1], lastName: data[2], email: data[3], username: data[4],
												contactNum: data[6], role: data[7], dateJoined: data[8], profile_pic: data[9], wallet: data[10]
											};
											const personJsonFormat = JSON.stringify(person);

											localStorage.setItem("user", personJsonFormat);

											Swal.fire({
												title: 'Profile Update Succesful',
												text: 'Profile update successfully',
												icon: 'success',
												confirmButtonText: 'OK'
											}).then(function () {
												window.location.href = '/profile';
											});
										} catch (error) {
											if (error.message.includes("revert")) {
												Swal.fire({
													title: 'Update Profile Failed',
													text: 'The wallet address is not associated with this account',
													icon: 'error',
													confirmButtonText: 'OK'
												});

											}
											else {
												Swal.fire({
													title: 'Update Profile Failed',
													text: 'Unknown Error',
													icon: 'error',
													confirmButtonText: 'OK'
												});
											}

											// registration failed, render error message
											console.log("Erorr:<br/>" + error.message);

											// var message = "The username already exist.";
											// myFunction(message);


											// document.getElementById("contentErr").innerHTML = "The username already exist.";
											//  res.render('register', { error: error.message });
										}
									}
								}


								// userJson.userID
							}
						}


						function validate(username, firstName, lastName, contactNum) {
							var valid = true;



							const regexUsername = /^[a-zA-Z0-9]+$/;
							const regexFirstLastName = /^[a-zA-Z ]+$/;
							const regexContact = /^(\+?6?01)[0-46-9]-*[0-9]{7,8}$/u;


							if (!regexUsername.test(username)) {
								document.getElementById("usernameErr").innerHTML = "Invalid username";
								valid = false;
								return;
							}
							else {
								document.getElementById("usernameErr").innerHTML = "";
								valid = true;
							}


							if (!regexFirstLastName.test(firstName)) {
								document.getElementById("firstNameErr").innerHTML = "Invalid firstname";
								valid = false;
								return;
							}
							else {
								document.getElementById("firstNameErr").innerHTML = "";
								valid = true;
							}

							if (!regexFirstLastName.test(lastName)) {
								document.getElementById("lastNameErr").innerHTML = "Invalid lastname";
								valid = false;
								return;
							}
							else {
								document.getElementById("lastNameErr").innerHTML = "";
								valid = true;
							}


							if (!regexContact.test(contactNum)) {
								document.getElementById("contactNumErr").innerHTML = "Invalid contact number";
								valid = false;
								return;
							}
							else {
								document.getElementById("contactNumErr").innerHTML = "";
								valid = true;
							}
							return valid;
						}
					
					</script>
					<!-- <script src="../bootstrap/assets/dist/js/bootstrap.bundle.min.js"></script>

                <script src="https://cdn.jsdelivr.net/npm/feather-icons@4.28.0/dist/feather.min.js"
                    integrity="sha384-uO3SXW5IuS1ZpFPKugNNWqTZRRglnUJK6UAZ/gxOX80nxEkN9NcGZTftn6RzhGWE"
                    crossorigin="anonymous"></script>
                <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js"
                    integrity="sha384-zNy6FEbO50N+Cg5wap8IKA4M/ZnLJgzc6w2NqACZaK0u0FXfOWRRJOnQtpZun8ha"
                    crossorigin="anonymous"></script>
                <script src="dashboard.js"></script> -->
	</body>

</html>